---
- name: Ensure /home/pfe/.ssh exists on worker
  file:
    path: /home/pfe/.ssh
    state: directory
    owner: pfe
    group: pfe
    mode: '0700'

- name: Fetch controller’s SSH public key from master
  slurp:
    src: /home/pfe/.ssh/id_rsa.pub
  delegate_to: "{{ groups.master[0] }}"
  register: master_pubkey
  ignore_errors: yes

- name: Authorize controller’s SSH key on worker
  authorized_key:
    user: pfe
    key: "{{ master_pubkey.content | b64decode | default('') }}"
    state: present
  when: master_pubkey is success and master_pubkey.content is defined

- name: Install & configure containerd on worker
  block:
    - name: Install dependencies
      dnf:
        name:
          - yum-utils
          - device-mapper-persistent-data
          - lvm2
        state: present

    - name: Add Kubernetes repo
      yum_repository:
        name: kubernetes
        description: Kubernetes RPM Repository
        baseurl: https://pkgs.k8s.io/core:/stable:/v1.29/rpm/
        gpgkey: https://pkgs.k8s.io/core:/stable:/v1.29/rpm/repodata/repomd.xml.key
        gpgcheck: yes
        repo_gpgcheck: yes
        enabled: yes

    - name: Install kubelet and kubeadm
      dnf:
        name:
          - kubelet-{{ kube_version }}
          - kubeadm-{{ kube_version }}
        state: present

    - name: Install containerd runtime
      dnf:
        name: containerd.io
        state: present

    - name: Configure containerd for systemd cgroup
      shell: |
        mkdir -p /etc/containerd
        containerd config default > /etc/containerd/config.toml
        sed -i 's/SystemdCgroup = false/SystemdCgroup = true/' /etc/containerd/config.toml

    - name: Enable and start containerd
      systemd:
        name: containerd
        enabled: yes
        state: restarted

    - name: Enable kubelet
      systemd:
        name: kubelet
        enabled: yes
        state: restarted

- name: Fetch join command from master
  command: cat /tmp/join-command.sh
  register: join_command
  delegate_to: "{{ groups.master[0] }}"
  run_once: yes
  ignore_errors: yes

- name: Recreate join command if missing
  shell: kubeadm token create --print-join-command > /tmp/join-command.sh
  delegate_to: "{{ groups.master[0] }}"
  run_once: yes
  when: join_command.failed or join_command.rc != 0

- name: Verify join command exists
  stat:
    path: /tmp/join-command.sh
  delegate_to: "{{ groups.master[0] }}"
  register: join_cmd_file
  run_once: yes
  failed_when: not join_cmd_file.stat.exists

- name: Execute join command
  command: "{{ join_command.stdout }}"
  when: inventory_hostname in groups.workers and join_command is success and join_command.rc == 0

- name: Wait for node to be reachable after reboot
  wait_for_connection:
    timeout: 600
  when: ansible_reboot_pending | default(false)
